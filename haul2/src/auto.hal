############################################################
# This is auto.hal
#
# It gets translated and merged into the root of the output file.
# Normally, that means it gets executed per default on the target platform.
############################################################
# need lib.hal
# need tokenzizer.hal
# need htk_xxx.hal
var $platformOut _string;

#set $platformOut "py";
set $platformOut "js";

var $filename _string;
set $filename "auto";


var $pathSrc _string "../src";
var $pathBuild _string "../build2";
var $filenameIn _string ($pathSrc + "/" + $filename + ".hal");
var $filenameOut _string ($pathBuild + "/" + $filename + "." + $platformOut);


func translate _void $streamIn _Stream, $streamOut _Stream, $translator _Translator {
	put("========== Translating... ==============");
	var $tokenizer _Tokenizer new _Tokenizer($streamIn);
	#var $translator _Translator_py new _Translator_py();
	$translator.translate($tokenizer, $streamOut);
	put("========================================");
}


### Package
var $streamOut _Stream;
set $streamOut new stream_file_write($filenameOut);

var $translator _Translator;

if ($platformOut == "py") {
	set $translator new _Translator_py();
} elif ($platformOut == "js") {
	set $translator new _Translator_js();
} else {
	put("Unknown plaform " + $platformOut + "!");
}


# Libraries...
put("bootstrap: Adding platform specific library resource...");
var $streamIn _Stream;
set $streamIn new stream_file_read($pathSrc + "/htk/" + $platformOut + "/lib." + $platformOut);
$streamOut.putAll($streamIn);
$streamIn.close();

put("bootstrap: Translating and adding platform independent helper functions...");
set $streamIn new stream_file_read($pathSrc + "/htk/common/lib.hal");
translate($streamIn, $streamOut, $translator);
$streamIn.close();


### Resources
put("bootstrap: Adding resources...");
/*
var $ress _Resources new _Resources();
for filenameRes in filenamesRes:
    res = resource(filenameRes, stream_file_read(pathSrc + filenameRes))
    ress.add(res)
streamOut.putString("#############################################################" + $CR)
streamOut.putString("# Resources" + $CR)
streamOut.putString("#############################################################" + $CR)
ress.dump_py(streamOut)
*/

# Just-in-time compiler...
put("bootstrap: Translating and adding tokenizer for run-time loading...");
set $streamIn new stream_file_read($pathSrc + "/htk/common/tokenizer.hal");
translate($streamIn, $streamOut, $translator);
$streamIn.close();

put("bootstrap: Translating and adding htk prototype for run-time loading...");
set $streamIn new stream_file_read($pathSrc + "/htk/common/htk.hal");
translate($streamIn, $streamOut, $translator);
$streamIn.close();

put("bootstrap: Translating and adding htk for run-time loading...");
set $streamIn new stream_file_read($pathSrc + "/htk/" + $platformOut + "/htk_" + $platformOut + ".hal");
translate($streamIn, $streamOut, $translator);
$streamIn.close();

# Main executable...
put("bootstrap: Translating and adding the main file " + filenameIn + "...");
set $streamIn new stream_file_read($filenameIn);
translate($streamIn, $streamOut, $translator);
$streamIn.close();

put("bootstrap: Closing...");
$streamOut.close();

put("bootstrap: " + $filenameOut + " finished.");

put("Therefore I am.");
